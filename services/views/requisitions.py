import json
import os
import urllib

from django.contrib import messages
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import DetailView
from django.views.generic.edit import (CreateView,
                                       UpdateView,
                                       FormView)
from django_filters.views import FilterView
from rest_framework.viewsets import ModelViewSet

from common_data.forms import AuthenticateForm
from common_data.utilities import ContextMixin
from common_data.views import PaginationMixin
from inventory.models import UnitOfMeasure, InventoryItem, InventoryController
from services import filters, forms, models
from messaging.models import Notification


class EquipmentRequisitionMixin(object):
    def post(self, request, *args, **kwargs):
        resp = super().post(request, *args, **kwargs)
        if not self.object:
            return resp

        equipment = json.loads(urllib.parse.unquote(request.POST['equipment']))

        for equ in equipment:
            equ_pk = equ['item'].split('-')[0]
            equ_item = InventoryItem.objects.get(pk=equ_pk)
            line = models.EquipmentRequisitionLine.objects.create(
                requisition=self.object,
                equipment=equ_item,
                requesting_condition=equ['condition'],
                quantity=equ['quantity']
            )
        return resp


class EquipmentRequisitionCreateView(EquipmentRequisitionMixin, CreateView):
    template_name = os.path.join('services', 'requisitions', 'equipment',
                                 'create.html')
    form_class = forms.EquipmentRequisitionForm

    def form_valid(self, form):
        resp = super().form_valid(form)
        qs = InventoryController.objects.filter(active=True)
        print(qs)
        if qs.exists():
            usr = qs.first().employee.user
            Notification.objects.create(
                title='Services: Requisition made',
                message='Requisition #{} has been generated by {}.'
                '\nPlease review.'.format(self.object.pk,
                                          self.object.requested_by),
                action='/inventory/equipment-requisition-auth-view/' +
                str(self.object.pk),
                user=usr
            )
        return resp


class WorkOrderEquipmentRequisitionCreateView(EquipmentRequisitionMixin,
                                              CreateView):
    template_name = os.path.join('services', 'requisitions', 'equipment',
                                 'create.html')
    form_class = forms.WorkOrderEquipmentRequisitionForm

    def get_initial(self):
        return {
            'work_order': self.kwargs['pk']
        }

    def form_valid(self, form):
        resp = super().form_valid(form)
        qs = InventoryController.objects.filter(active=True)
        if qs.exists():
            usr = qs.first().employee.user
            Notification.objects.create(
                title='Services: Requisition made',
                message='Requisition #{} has been generated by {}.'
                '\nPlease review.'.format(self.object.pk,
                                          self.object.requested_by),
                action='/inventory/equipment-requisition-auth-view/' +
                str(self.object.pk),
                user=usr
            )
        return resp


class EquipmentRequisitionAuthorizeView(DetailView):
    template_name = os.path.join('services', 'requisitions', 'equipment',
                                 'authorize_release.html')
    model = models.EquipmentRequisition

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)
        context['authorize_form'] = AuthenticateForm()
        context['release_form'] = AuthenticateForm()
        return context


class EquipmentRequisitionListView(ContextMixin, PaginationMixin, FilterView):
    filterset_class = filters.EquipmentRequisitionFilter
    queryset = models.EquipmentRequisition.objects.all().order_by(
        'date').reverse()
    paginate_by = 20
    template_name = os.path.join(
        'services', 'requisitions', 'equipment', 'list.html')

    extra_context = {
        'title': 'List of Equipment Requisitions'
    }


class EquipmentRequisitionAPIView(ModelViewSet):
    pass


def equipment_requisition_authorize(request, pk=None):
    req = get_object_or_404(models.EquipmentRequisition, pk=pk)
    redirect_path = reverse_lazy('inventory:equipment-requisition-detail',
                                 kwargs={'pk': pk})
    valid = request.user.is_superuser or \
        (request.user.employee.is_inventory_controller and
            request.user.employee.inventorycontroller.can_authorize_equipment_requisitions)
    if valid:
        req.authorized_by = request.user.employee
        req.save()
        return HttpResponseRedirect(redirect_path)

    messages.info(
        request, f'{request.user.employee} cannot authorize requisitions')
    return HttpResponseRedirect(f"/inventory/equipment-requisition-auth-view/{pk}")


def equipment_requisition_release(request, pk=None):
    req = get_object_or_404(models.EquipmentRequisition, pk=pk)
    redirect_path = reverse_lazy('inventory:equipment-requisition-detail',
                                 kwargs={'pk': pk})
    valid = request.user.is_superuser or \
        (request.user.employee.is_inventory_controller and
            request.user.employee.inventorycontroller.can_authorize_equipment_requisitions)
    if valid:
        req.released_by = request.user.employee
        req.save()
        return HttpResponseRedirect(redirect_path)

    messages.info(
        request, f'{request.user.employee} cannot release requisitions')
    return HttpResponseRedirect(f"/inventory/equipment-requisition-auth-view/{pk}")


#################################################
#            Consumable Requisitions            #
#################################################

class ConsumableRequisitionMixin():

    def post(self, request, *args, **kwargs):
        resp = super().post(request, *args, **kwargs)
        if not self.object:
            return resp

        consumables = json.loads(
            urllib.parse.unquote(request.POST['consumables']))

        for con in consumables:
            con_pk = con['item'].split('-')[0]
            con_item = InventoryItem.objects.get(pk=con_pk)
            unit_pk = con['unit'].split('-')[0]
            unit = UnitOfMeasure.objects.get(pk=unit_pk)
            line = models.ConsumablesRequisitionLine.objects.create(
                requisition=self.object,
                consumable=con_item,
                quantity=con['quantity'],
                unit=unit
            )
        return resp


class ConsumableRequisitionCreateView(ConsumableRequisitionMixin, CreateView):
    template_name = os.path.join('services', 'requisitions', 'consumables',
                                 'create.html')
    form_class = forms.ConsumablesRequisitionForm

    def form_valid(self, form):
        resp = super().form_valid(form)
        qs = InventoryController.objects.filter(active=True)
        if qs.exists():
            usr = qs.first().employee.user
            Notification.objects.create(
                title='Services: Requisition made',
                message='Requisition #{} has been generated by {}.'
                '\nPlease review.'.format(self.object.pk,
                                          self.object.requested_by),
                action='/inventory/consumable-requisition-auth-view/' +
                str(self.object.pk),
                user=usr
            )
        return resp


class WorkOrderConsumableRequisitionCreateView(ConsumableRequisitionMixin,
                                               CreateView):
    template_name = os.path.join('services', 'requisitions', 'consumables',
                                 'create.html')
    form_class = forms.WorkOrderConsumablesRequisitionForm

    def get_initial(self):
        return {
            'work_order': self.kwargs['pk']
        }

    def form_valid(self, form):
        resp = super().form_valid(form)
        qs = InventoryController.objects.filter(active=True)
        if qs.exists():
            usr = qs.first().employee.user
            Notification.objects.create(
                title='Services: Requisition made',
                message='Requisition #{} has been generated by {}.'
                '\nPlease review.'.format(self.object.pk,
                                          self.object.requested_by),
                action='/inventory/consumable-requisition-auth-view/' +
                str(self.object.pk),
                user=usr
            )
        return resp


class ConsumableRequisitionAuthorizeView(DetailView):
    template_name = os.path.join('services', 'requisitions', 'consumables',
                                 'authorize_release.html')
    model = models.ConsumablesRequisition

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)
        context['authorize_form'] = AuthenticateForm()
        context['release_form'] = AuthenticateForm()
        return context


class ConsumableRequisitionDetailView(DetailView):
    template_name = os.path.join('services', 'requisitions', 'consumables',
                                 'detail.html')
    model = models.ConsumablesRequisition

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)
        context['authorize_form'] = AuthenticateForm()
        return context


class ConsumableRequisitionListView(ContextMixin, PaginationMixin, FilterView):
    filterset_class = filters.ConsumableRequisitionFilter
    queryset = models.ConsumablesRequisition.objects.all().order_by(
        'date').reverse()
    template_name = os.path.join(
        'services', 'requisitions', 'consumables', 'list.html')
    paginate_by = 20

    extra_context = {
        'title': 'List of Consumables Requisitions'
    }


def consumable_requisition_authorize(request, pk=None):
    req = get_object_or_404(models.ConsumablesRequisition, pk=pk)
    redirect_path = reverse_lazy('inventory:consumable-requisition-detail',
                                 kwargs={
                                     'pk': pk
                                 })
    valid = request.user.is_superuser or \
        (request.user.employee.is_inventory_controller and
            request.user.employee.inventorycontroller.can_authorize_consumables_requisitions)
    if valid:
        req.authorized_by = request.user.employee
        req.save()
        return HttpResponseRedirect(redirect_path)

    messages.info(
        request, f'{request.user.employee} cannot authorize requisitions')
    return HttpResponseRedirect(f"/inventory/consumable-requisition-auth-view/{pk}")


def consumable_requisition_release(request, pk=None):
    req = get_object_or_404(models.ConsumablesRequisition, pk=pk)
    redirect_path = reverse_lazy('inventory:consumable-requisition-detail',
                                 kwargs={
                                     'pk': pk
                                 })
    valid = request.user.is_superuser or \
        (request.user.employee.is_inventory_controller and
            request.user.employee.inventorycontroller.can_authorize_consumables_requisitions)
    if valid:
        req.released_by = request.user.employee
        req.save()
        req.release_inventory()
        return HttpResponseRedirect(redirect_path)

    messages.info(
        request, f'{request.user.employee} cannot authorize requisitions')
    return HttpResponseRedirect(f"/inventory/consumable-requisition-auth-view/{pk}")


class EquipmentReturnView(FormView):
    template_name = os.path.join('services', 'requisitions', 'equipment',
                                 'return.html')
    form_class = forms.EquipmentReturnForm
    success_url = "/inventory/"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        context['requisition'] = get_object_or_404(models.EquipmentRequisition,
                                                   pk=self.kwargs['pk'])

        return context

    def get_initial(self):
        return {
            'requisition': self.kwargs['pk']
        }

    def post(self, request, *args, **kwargs):
        resp = super().post(request, *args, **kwargs)
        # setting line values
        fields = dict(request.POST).keys()

        for field in fields:
            if field.startswith('equipment_returned'):
                line = models.EquipmentRequisitionLine.objects.get(
                    pk=field.split('_')[2]
                )
                line.quantity_returned = float(request.POST[field])
                line.save()

            elif field.startswith('equipment_condition'):
                line = models.EquipmentRequisitionLine.objects.get(
                    pk=field.split('_')[2]
                )
                line.returned_condition = request.POST[field]
                line.save()

        return resp


class EquipmentRequisitionDetailView(DetailView):
    # TODO test
    model = models.EquipmentRequisition
    template_name = os.path.join(
        'services', 'requisitions', 'equipment', 'detail.html')
